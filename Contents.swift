import UIKit

// 1. рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Book.
//Properties: bookID(рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃўрЃЊрЃћрЃюрЃбрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў Int), String title, String author, Bool isBorrowed.
//Designated Init.

class Book {
    let bookID: Int
    var title: String
    var author: String
    var isBorrowed: Bool
    
    init(bookID: Int, title: String, author: String, isBorrowed: Bool) {
        self.bookID = bookID
        self.title = title
        self.author = author
        self.isBorrowed = isBorrowed
    }
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃгрЃўрЃњрЃюрЃА рЃарЃЮрЃњрЃЮрЃарЃф borrowed-рЃА.
    func bookIsBorrowed() {
        if !isBorrowed {
            isBorrowed = true
        }
    }
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃюрЃўрЃерЃюрЃљрЃЋрЃА рЃгрЃўрЃњрЃюрЃА рЃарЃЮрЃњрЃЮрЃарЃф рЃЊрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃБрЃџрЃА.
    func bookIsReturned() {
        if isBorrowed {
            !isBorrowed
        }
    }
}

//рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Owner
//Properties: ownerId(рЃБрЃюрЃўрЃЎрЃљрЃџрЃБрЃарЃў рЃўрЃЊрЃћрЃюрЃбрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў Int), String name, Books Array рЃАрЃљрЃ«рЃћрЃџрЃўрЃЌ borrowedBooks.
//Designated Init.

class Owner {
    let ownerId: Int
    var name: String
    var borrowedBooks: [Book]
    
    init(ownerId: Int, name: String, borrowedBooks: [Book]) {
        self.ownerId = ownerId
        self.name = name
        self.borrowedBooks = borrowedBooks
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА рЃарЃЮрЃЏ рЃљрЃўрЃдрЃЮрЃА рЃгрЃўрЃњрЃюрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю.
    func borrowBook(from library: [Book], bookId: Int) {
        if let bookIndex = library.firstIndex(where: { $0.bookID == bookId && !$0.isBorrowed }) {
            let bookToBorrow = library[bookIndex]
            bookToBorrow.isBorrowed = true
            borrowedBooks.append(bookToBorrow)
            print("рЃгрЃўрЃњрЃюрЃў рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ \(bookToBorrow.title) рЃњрЃљрЃЊрЃљрЃўрЃфрЃљ рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ")
        } else {
            print("рЃгрЃўрЃњрЃюрЃў рЃљрЃа рЃљрЃарЃўрЃА рЃЌрЃљрЃЋрЃўрЃАрЃБрЃцрЃљрЃџрЃў")
        }
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА рЃарЃЮрЃЏ рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃЮрЃА рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃў.
    func returnBook(bookId: Int) {
        if let bookIndex = borrowedBooks.firstIndex(where: { $0.bookID == bookId }) {
            borrowedBooks[bookIndex].isBorrowed = false
            borrowedBooks.remove(at: bookIndex)
            print("рЃгрЃўрЃњрЃюрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃЊрЃљрЃЉрЃарЃБрЃюрЃЊрЃљ рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ")
        } else {
            print("рЃЌрЃЦрЃЋрЃћрЃю рЃљрЃа рЃгрЃљрЃњрЃўрЃдрЃўрЃљрЃЌ рЃћрЃА рЃгрЃўрЃњрЃюрЃў :O")
        }
    }
}


//рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ Class Library
//
//Properties: Books Array, Owners Array.
//Designated Init.
class Library {
    var books: [Book]
    var owners: [Owner]
    
    init(books: [Book] = [], owners: [Owner] = []) {
        self.books = books
        self.owners = owners
    }
    
    //Method рЃгрЃўрЃњрЃюрЃўрЃА рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃљ, рЃарЃљрЃЌрЃљ рЃЕрЃЋрЃћрЃюрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљ рЃерЃћрЃЋрЃљрЃЋрЃАрЃЮрЃЌ рЃгрЃўрЃњрЃюрЃћsрЃЉрЃўрЃЌ. +
    func addBookToBiblioteca(book: Book) {
        books.append(book)
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃљрЃЏрЃљрЃбрЃћрЃЉрЃА Owner-рЃА. +
    func addOwner(owner: Owner) {
        owners.append(owner)
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃърЃЮрЃБрЃџрЃЮрЃЉрЃА рЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃДрЃЋрЃћрЃџрЃљ рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏ рЃгрЃўрЃњрЃюрЃА. +
    func availableBooks(bookList: [Book]) {
        let availableBooks = books.filter { !$0.isBorrowed }
        
        if availableBooks.isEmpty {
            print("рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃљрЃа рЃљрЃарЃАрЃћрЃЉрЃЮрЃЉрЃА рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў")
        } else {
            print("рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃЌрЃљрЃЋрЃўрЃАрЃБрЃцрЃљрЃџрЃў/рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃљ")
            for book in availableBooks {
                print("рЃАрЃљрЃЌрЃљрЃБрЃарЃў: \(book.title)")
                print("рЃљрЃЋрЃбрЃЮрЃарЃў: \(book.author)")
                print("рЃгрЃўрЃњрЃюрЃўрЃА рЃўрЃЊрЃћрЃюрЃЌрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў: \(book.bookID)")
                print("­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ")
            }
        }
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃърЃЮрЃБрЃџрЃЮрЃЉрЃА рЃЊрЃљ рЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃДрЃЋрЃћрЃџрЃљ рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃА. +
    func unavailableBooks(bookList: [Book]) {
        let unavailableBooks = books.filter { $0.isBorrowed }
        
        if unavailableBooks.isEmpty {
            print("рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃДрЃЋрЃћрЃџрЃљ рЃгрЃўрЃњрЃюрЃў рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏрЃўрЃљ, рЃњрЃљрЃћрЃфрЃљрЃюрЃўрЃЌ рЃАрЃўрЃљрЃА")
        } else {
            print("рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃўрЃљ рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў")
            for book in unavailableBooks {
                print("рЃАрЃљрЃЌрЃљрЃБрЃарЃў: \(book.title)")
                print("рЃљрЃЋрЃбрЃЮрЃарЃў: \(book.author)")
                print("рЃгрЃўрЃњрЃюрЃўрЃА рЃўрЃЊрЃћрЃюрЃЌрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃў: \(book.bookID)")
                print("­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ­ЪЊќ")
            }
        }
        
    }
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃћрЃФрЃћрЃЉрЃА Owner-рЃА рЃЌрЃљрЃЋрЃўрЃАрЃў рЃљрЃўрЃЊрЃўрЃЌ рЃЌрЃБ рЃћрЃњрЃћрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃЮрЃЉрЃА. +
    func findOwner(with ownerId: Int) -> Owner? {
        for owner in owners {
            if owner.ownerId == ownerId {
                return owner
            }
        }
        return nil
    }
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃћрЃФрЃћрЃЉрЃА рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃћрЃЉрЃА рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃў Owner-рЃўрЃА рЃЏрЃўрЃћрЃа. +
    func findBook(with id: Int) {
        if let owner = findOwner(with: id) {
            if owner.borrowedBooks.isEmpty {
                print("рЃърЃўрЃарЃЮрЃЋрЃюрЃћрЃЉрЃљрЃА рЃўрЃЊрЃћрЃюрЃЌрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃЌ:\(id)-рЃА рЃљрЃа рЃљрЃЦрЃЋрЃА рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю")
            } else {
                print("рЃърЃўрЃарЃЮрЃЋрЃюрЃћрЃЉрЃљрЃА рЃўрЃЊрЃћрЃюрЃЌрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃЌ \"\(id)\" рЃњрЃљрЃбрЃљрЃюрЃўрЃџрЃў рЃљрЃЦрЃЋрЃА рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃгрЃўрЃњрЃюрЃћрЃюрЃў/рЃгрЃўрЃњрЃюрЃћрЃЉрЃў ­ЪЊџ:")
                for (index, book) in owner.borrowedBooks.enumerated() {
                    let bookNumber = index + 1
                    print("\(bookNumber)) рЃАрЃљрЃЌрЃљрЃБрЃарЃў: \(book.title) - рЃљрЃЋрЃбрЃЮрЃарЃў: \(book.author)")
                    print("\n")
                }
            }
        } else {
            print("рЃЏрЃцрЃџрЃЮрЃЉрЃћрЃџрЃў рЃљрЃЏ рЃўрЃюрЃЊрЃћрЃюрЃЌрЃўрЃцрЃўрЃЎрЃљрЃбрЃЮрЃарЃўрЃЌ (\(id)) рЃљрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ")
        }
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃљрЃФрЃџрЃћрЃЋрЃА рЃБрЃцрЃџрЃћрЃЉрЃљрЃА Owner-рЃА рЃгрЃљрЃљрЃдрЃћрЃЉрЃўрЃюрЃЮрЃА рЃгрЃўрЃњрЃюрЃў рЃЌрЃБ рЃўрЃА рЃЌрЃљрЃЋрЃўрЃАрЃБрЃцрЃљрЃџрЃўрЃљ. +
    func takeBookOut(of bookInLibrary: [Book], by owner: Owner, book: Book, id: Int) {
        if !book.isBorrowed {
            // The book is available, so borrow it
            owner.borrowBook(from: bookInLibrary, bookId: id)
            print("рЃгрЃўрЃњрЃюрЃў \(book.title) рЃњрЃљрЃЊрЃљрЃћрЃфрЃљ \(owner.name)рЃА")
            print("\n")
        } else {
            print("рЃгрЃўрЃњрЃюрЃў рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ \(book.title) рЃБрЃЎрЃЋрЃћ рЃљрЃдрЃћрЃЉрЃБрЃџрЃўрЃљ")
        }
    }
    
    //Method рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃћ рЃерЃћрЃЋрЃЦрЃЏрЃћрЃюрЃў рЃарЃЮрЃЏ рЃЊрЃљрЃЏрЃћрЃЉрЃарЃБрЃюрЃћрЃЉрЃўрЃюрЃљ рЃгрЃўрЃњрЃюрЃћрЃЉрЃўрЃА рЃарЃљрЃдрЃљрЃф рЃюрЃљрЃгрЃўрЃџрЃў
    func takeBookIn(to bookInLibrary: [Book], by owner: Owner, book: Book, bookId: Int) {
        if book.isBorrowed {
            owner.returnBook(bookId: bookId)
            print("рЃгрЃўрЃњрЃюрЃў \(book.title) рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў рЃгрЃљрЃарЃЏрЃљрЃбрЃћрЃЉрЃўрЃЌ рЃЊрЃљрЃЉрЃарЃБрЃюрЃЊрЃљ \(owner.name)рЃА рЃЏрЃўрЃћрЃа")
            print("\n")
        } else {
            print("рЃгрЃўрЃњрЃюрЃў рЃАрЃљрЃ«рЃћрЃџрЃљрЃЊ \(book.title) рЃљрЃа рЃљрЃњрЃўрЃдрЃўрЃљрЃЌ")
        }
    }
}

//рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ рЃарЃљрЃЏрЃЮрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃгрЃўрЃњрЃюрЃў рЃЊрЃљ рЃарЃљрЃЏрЃЮрЃЊрЃћрЃюрЃўрЃЏрЃћ Owner-рЃў, рЃерЃћрЃЋрЃЦрЃЏрЃюрЃљрЃЌ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљ.
//рЃЊрЃљрЃЋрЃљрЃЏрЃљрЃбрЃЮрЃЌ рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЊрЃљ Owner-рЃћрЃЉрЃў рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃљрЃерЃў
//рЃгрЃљрЃЋрЃљрЃдрЃћрЃЉрЃўрЃюрЃЮрЃЌ Owner-рЃћрЃЉрЃА рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЊрЃљ рЃЊрЃљрЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃўрЃюрЃЮрЃЌ рЃарЃљрЃдрЃљрЃф рЃюрЃљрЃгрЃўрЃџрЃў.
//рЃЊрЃљрЃЋрЃЉрЃћрЃГрЃЊрЃЮрЃЌ рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃгрЃљрЃдрЃћрЃЉрЃБрЃџ рЃгрЃўрЃњрЃюрЃћрЃЉрЃќрЃћ, рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏ рЃгрЃўрЃњрЃюрЃћрЃЉрЃќрЃћ рЃЊрЃљ рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃбрЃљрЃюрЃЮрЃЌ рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃљрЃЊ рЃћрЃарЃЌрЃў Owner-рЃўрЃА рЃЏрЃўрЃћрЃа.

var books: [Book] = [
    Book(bookID: 1, title: "рЃФрЃЏрЃћрЃЉрЃў рЃЎрЃљрЃарЃљрЃЏрЃљрЃќрЃЮрЃЋрЃћрЃЉрЃў", author: "рЃцрЃўрЃЮрЃЊрЃЮрЃа рЃЊрЃЮрЃАрЃбрЃЮрЃћрЃЋрЃАрЃЎрЃў", isBorrowed: true),
    Book(bookID: 2, title: "рЃљрЃюрЃљ рЃЎрЃљрЃарЃћрЃюрЃўрЃюрЃљ", author: "рЃџрЃћрЃЋ рЃбрЃЮрЃџрЃАрЃбрЃЮрЃў", isBorrowed: false),
    Book(bookID: 3, title: "рЃЊрЃўрЃЊрЃЮрЃАрЃбрЃљрЃбрЃўрЃА рЃЏрЃљрЃарЃ»рЃЋрЃћрЃюрЃљ", author: "рЃЎрЃЮрЃюрЃАрЃбрЃљрЃюрЃбрЃўрЃюрЃћ рЃњрЃљрЃЏрЃАрЃљрЃ«рЃБрЃарЃЊрЃўрЃљ", isBorrowed: true),
    Book(bookID: 4, title: "рЃбрЃарЃўрЃБрЃЏрЃцрЃљрЃџрЃБрЃарЃў рЃЌрЃљрЃдрЃў", author: "рЃћрЃарЃўрЃ« рЃЏрЃљрЃарЃўрЃљ рЃарЃћрЃЏрЃљрЃарЃЎрЃў", isBorrowed: false),
    Book(bookID: 5, title: "рЃЊрЃЮрЃарЃўрЃљрЃю рЃњрЃарЃћрЃўрЃА рЃърЃЮрЃарЃбрЃарЃћрЃбрЃў", author: "рЃЮрЃАрЃЎрЃљрЃа рЃБрЃљрЃўрЃџрЃЊрЃў", isBorrowed: true)
]

var owners: [Owner] = [
    Owner(ownerId: 001, name: "рЃџрЃБрЃЎрЃљ рЃЏрЃгрЃўрЃњрЃюрЃЮрЃЉрЃљрЃарЃЌрЃБрЃ«рЃБрЃфрЃћрЃАрЃў", borrowedBooks: [books[0]]),
    Owner(ownerId: 002, name: "рЃЏрЃљрЃарЃўрЃљрЃЏ рЃЉрЃћрЃЋрЃарЃўрЃгрЃўрЃњрЃюрЃўрЃерЃЋрЃўрЃџрЃў", borrowedBooks: [books[2], books[4]]),
    Owner(ownerId: 003, name: "рЃњрЃўрЃЮрЃарЃњрЃў рЃгрЃўрЃњрЃюрЃўрЃгрЃљрЃдрЃћрЃЉрЃўрЃФрЃћ", borrowedBooks: [])
]

var biblioteca = Library(books: books, owners: owners)

// рЃгрЃљрЃЋрЃљрЃдрЃћрЃЉрЃўрЃюрЃЮрЃЌ Owner-рЃћрЃЉрЃА рЃгрЃўрЃњрЃюрЃћрЃЉрЃў
biblioteca.takeBookOut(of: books, by: owners[2], book: books[1], id: 2)
biblioteca.takeBookOut(of: books, by: owners[0], book: books[3], id: 4)
//biblioteca.findBook(with: 001)
//biblioteca.findBook(with: 003)

// рЃЊрЃљрЃЋрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃўрЃюрЃЮрЃЌ рЃарЃљрЃдрЃљрЃф рЃюрЃљрЃгрЃўрЃџрЃў.
biblioteca.takeBookIn(to: books, by: owners[1], book: books[2], bookId: 3)
biblioteca.takeBookIn(to: books, by: owners[0], book: books[0], bookId: 1)

//рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃћрЃюрЃўрЃА рЃерЃћрЃАрЃљрЃ«рЃћрЃЉ
biblioteca.availableBooks(bookList: books)
print("\n")

// рЃўрЃюрЃцрЃЮрЃарЃЏрЃљрЃфрЃўрЃљ рЃЉрЃўрЃЉрЃџрЃўрЃЮрЃЌрЃћрЃЎрЃўрЃЊрЃљрЃю рЃ«рЃћрЃџрЃЏрЃўрЃАрЃљрЃгрЃЋрЃЊрЃЮрЃЏ рЃгрЃўрЃњрЃюрЃћрЃЉрЃќрЃћ
biblioteca.unavailableBooks(bookList: books)
print("\n")

// рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃбрЃљрЃюрЃЮрЃЌ рЃгрЃљрЃдрЃћрЃЉрЃБрЃџрЃў рЃгрЃўрЃњрЃюрЃћрЃЉрЃў рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃљрЃЊ рЃћрЃарЃЌрЃў Owner-рЃўрЃА рЃЏрЃўрЃћрЃа
biblioteca.findBook(with: 002)



